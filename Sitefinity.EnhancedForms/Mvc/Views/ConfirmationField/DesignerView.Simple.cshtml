@using Telerik.Sitefinity.Frontend.Forms.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.Models.Fields.TextField;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Mvc;
@using Sitefinity.EnhancedForms.Mvc.Models;
@using Telerik.Sitefinity.Localization;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.StringResources;
@using Sitefinity.EnhancedForms;

<uib-tabset class="nav-tabs-wrapper">
    <uib-tab heading="@Html.Resource("MainFieldLabel")">

        <div class="form-group">
            <label for="title">
                @(Res.Get<FieldResources>().Label)
            </label>
            <div class="row">
                <div class="col-xs-6">
                    <input id="title" type="text" ng-model="properties.Model.MetaField.Title.PropertyValue" class="form-control" />
                </div>
            </div>
            <p class="text-muted">@(Res.Get<EnhancedFormsResources>().ExamplePassword)</p>
        </div>
        <div class="form-group">
            <label for="placeholderText">
                @(Res.Get<FieldResources>().PlaceholderText)
            </label>
            <div class="row">
                <div class="col-xs-6">
                    <input id="placeholderText" type="text" ng-model="properties.Model.PlaceholderText.PropertyValue" class="form-control" />
                </div>
            </div>
        </div>

        <div class="form-group">
            <a ng-hide="showInstructionalText || properties.Model.MetaField.Description.PropertyValue" ng-click="showInstructionalText=true;">@(Res.Get<FieldResources>().AddInstructionalText)</a>
            <div ng-show="showInstructionalText || properties.Model.MetaField.Description.PropertyValue">
                <label for="example">
                    @(Res.Get<FieldResources>().InstructionalText)
                </label>
                <div class="row">
                    <div class="col-xs-9">
                        <textarea id="example" ng-model="properties.Model.MetaField.Description.PropertyValue" class="form-control"></textarea>
                        <p class="text-muted">@(Res.Get<FieldResources>().ExampleExplanation)</p>
                    </div>
                </div>

            </div>
        </div>

        <div class="form-group">
            <label for="predefinedValue">
                @(Res.Get<FieldResources>().PredefinedValue)
            </label>
            <div class="row">
                <div class="col-xs-6">
                    <input id="predefinedValue" type="{{fieldInputType}}" ng-model="defaultValue.value" ng-value="properties.Model.MetaField.DefaultValue.PropertyValue" class="form-control" />
                </div>
            </div>

        </div>

        <div class="form-group">
            <div class="checkbox">
                <label>
                    <input type="checkbox" ng-model="properties.Model.ValidatorDefinition.Required.PropertyValue"
                           ng-true-value="'True'" ng-false-value="'False'" ng-checked="properties.Model.ValidatorDefinition.Required.PropertyValue === 'True'" />
                    @(Res.Get<FieldResources>().RequiredField)
                </label>
            </div>
        </div>

        <div class="form-group" ng-show="properties.Model.ValidatorDefinition.Required.PropertyValue === 'True'">
            <label for="example">
                @(Res.Get<FieldResources>().RequiredErrorMessageTitle)
            </label>
            <input type="text" id="example" ng-model="properties.Model.ValidatorDefinition.RequiredViolationMessage.PropertyValue" class="form-control" />
        </div>

        <div class="form-group">
            <div class="checkbox">
                <label>
                    <input type="checkbox" ng-model="properties.Model.Hidden.PropertyValue"
                           ng-true-value="'True'" ng-false-value="'False'" ng-checked="properties.Model.Hidden.PropertyValue === 'True'" />
                    @(Res.Get<FieldResources>().HiddenField)
                </label>
            </div>
        </div>

        <expander expander-title='@(Res.Get<FieldResources>().MoreOptions)'>
            <div class="form-group">
                <label for="textFieldTemplateName">@(Res.Get<FieldResources>().Template)</label>
                <div class="row">
                    <div class="col-xs-6">
                        <select id="textFieldTemplateName" ng-model="properties.WriteTemplateName.PropertyValue" class="form-control">
                            @foreach (var viewName in Html.GetViewNames(((Telerik.Sitefinity.Mvc.Proxy.MvcProxyBase)Model).GetController(), @"^Write\.(?<viewName>[\w\s]*)$"))
                            {
                                <option value="@viewName"> @viewName.SplitCamelCase()</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <style-dropdown selected-class="properties.Model.CssClass.PropertyValue" view-name="properties.WriteTemplateName.PropertyValue"></style-dropdown>
            <div class="form-group">
                <label for="cssClass">@(Res.Get<FieldResources>().CssClasses)</label>
                <input type="text" id="cssClass" ng-model="properties.Model.CssClass.PropertyValue" class="form-control" />
            </div>
        </expander>
    </uib-tab>
    <uib-tab heading="@Html.Resource("ConfirmationFieldLabel")">

        <div class="form-group">
            <label for="title">
                @(Res.Get<FieldResources>().Label)
            </label>
            <div class="row">
                <div class="col-xs-6">
                    <input id="title" type="text" ng-model="properties.Model.ConfirmationTitle.PropertyValue" class="form-control" />
                </div>
            </div>
            <p class="text-muted">@(Res.Get<EnhancedFormsResources>().ExampleConfirmPassword)</p>
        </div>
        <div class="form-group">
            <label for="placeholderText">
                @(Res.Get<FieldResources>().PlaceholderText)
            </label>
            <div class="row">
                <div class="col-xs-6">
                    <input id="placeholderText" type="text" ng-model="properties.Model.ConfirmationPlaceholder.PropertyValue" class="form-control" />
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="predefinedValue">
                @(Res.Get<FieldResources>().PredefinedValue)
            </label>
            <div class="row">
                <div class="col-xs-6">
                    <input id="predefinedValue" type="{{fieldInputType}}" ng-model="properties.Model.ConfirmationDefaultValue.PropertyValue" ng-value="properties.Model.ConfirmationDefaultValue.PropertyValue" class="form-control" />
                </div>
            </div>

        </div>

        <expander expander-title='@(Res.Get<FieldResources>().MoreOptions)'>
            <div class="form-group">
                <label for="textFieldTemplateName">@(Res.Get<FieldResources>().Template)</label>
                <div class="row">
                    <div class="col-xs-6">
                        <select id="textFieldTemplateName" ng-model="properties.WriteTemplateName.PropertyValue" class="form-control">
                            @foreach (var viewName in Html.GetViewNames(((Telerik.Sitefinity.Mvc.Proxy.MvcProxyBase)Model).GetController(), @"^Write\.(?<viewName>[\w\s]*)$"))
                            {
                                <option value="@viewName"> @viewName.SplitCamelCase()</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <style-dropdown selected-class="properties.Model.CssClass.PropertyValue" view-name="properties.WriteTemplateName.PropertyValue"></style-dropdown>
            <div class="form-group">
                <label for="cssClass">@(Res.Get<FieldResources>().CssClasses)</label>
                <input type="text" id="cssClass" ng-model="properties.Model.CssClass.PropertyValue" class="form-control" />
            </div>
        </expander>
    </uib-tab>
    <uib-tab heading="@(Res.Get<FieldResources>().Limitations)">
        <div class="form-group">
            <label for="inputType">@(Res.Get<FieldResources>().Type)</label>
            <div class="row">
                <div class="col-xs-6">
                    <select id="inputType" ng-model="properties.Model.InputType.PropertyValue" class="form-control">
                        @foreach (var typeName in Enum.GetNames(typeof(TextType)))
                        {
                            <option value="@typeName">@(((TextType)Enum.Parse(typeof(TextType), typeName)).ToHtmlInputType())</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label>@(Res.Get<FieldResources>().Range)</label>
            <div class="row row-xs">
                <div class="col-xs-2">
                    <label for="minLength">@(Res.Get<FieldResources>().Min)</label>
                </div>
                <div class="col-xs-2">
                    <label for="maxLength">@(Res.Get<FieldResources>().Max)</label>
                </div>
            </div>
            <div class="row row-xs sfDisplayFlex sfDisplayFlexCenteredHorizontally">
                <div class="col-xs-2">
                    <input type="text" id="minLength" ng-model="properties.Model.ValidatorDefinition.MinLength.PropertyValue" class="form-control" />
                </div>
                <div class="col-xs-2">

                    <input type="text" id="maxLength" ng-model="properties.Model.ValidatorDefinition.MaxLength.PropertyValue" class="form-control" />
                </div>
                <div class="col-xs-8">
                    @(Res.Get<FieldResources>().Characters)
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="tooLarge">@(Res.Get<FieldResources>().TooLargeErrorMessageTitle)</label>
            <input type="text" id="tooLarge" ng-model="properties.Model.ValidatorDefinition.MaxLengthViolationMessage.PropertyValue" class="form-control" />
        </div>

        <div class="form-group">
            <label for="tooLarge">@Html.Resource("FieldsDoNotMatchErrorTitle")</label>
            <input type="text" id="tooLarge" ng-model="properties.Model.ConfirmValidatorDefinition.FieldsDoNotMatchMessage.PropertyValue" class="form-control" />
        </div>
    </uib-tab>
</uib-tabset>
