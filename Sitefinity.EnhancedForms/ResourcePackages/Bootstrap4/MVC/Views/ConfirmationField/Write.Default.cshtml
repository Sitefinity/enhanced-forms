@*@model Telerik.Sitefinity.Frontend.Forms.Mvc.Models.Fields.TextField.TextFieldViewModel*@
@model Sitefinity.EnhancedForms.Mvc.Models.ConfirmationField.ConfirmationFieldViewModel

@using Telerik.Sitefinity.UI.MVC;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.Models.Fields.TextField;
@using Telerik.Sitefinity.Localization;
@using Telerik.Sitefinity.Frontend.Forms.Mvc.StringResources;

@Html.Script(ScriptRef.JQuery, "top", false)
<!-- InputCssClass class variable -->
@{
    var inputCssClass = "";
    HashSet<TextType> availableOptions = new HashSet<TextType>() { TextType.Text, TextType.Password, TextType.Date, TextType.DateTimeLocal, TextType.Month, TextType.Time,
TextType.Week, TextType.Number, TextType.Email,TextType.Url, TextType.Tel, TextType.Color };

    if (availableOptions.Contains(Model.InputType))
    {
        inputCssClass = "form-control";
    }

    var isRequired = Model.ValidatorDefinition.Required.HasValue && Model.ValidatorDefinition.Required.Value ? "true" : "false";
    var hasDescription = !string.IsNullOrEmpty(Model.MetaField.Description);
}
<div class="@Model.CssClass form-group" data-sf-role="confirmation-field-container">
    <input data-sf-role="violation-restrictions" type="hidden" value='{"maxLength":"@Model.ValidatorDefinition.MaxLength", "minLength": "@Model.ValidatorDefinition.MinLength"}' />
    <input data-sf-role="violation-messages" data-sf-description="@Html.UniqueId("Textbox")" type="hidden" value='{"fieldsMatch":"@Model.ConfirmValidatorDefinition.FieldsDoNotMatchMessage", "maxLength":"@Model.MaxLengthViolationMessage", "required": "@Model.MainFieldRequiredViolationMessage", "invalid": "@(Res.Get<FieldResources>().InvalidEntryMessage)", "regularExpression": "@Model.ValidatorDefinition.RegularExpressionViolationMessage"}' />
    <label class="h6" for='@Html.UniqueId("Textbox")'>@Model.MetaField.Title</label>
    <input id='@Html.UniqueId("Textbox")'
           type="@Model.InputType.ToHtmlInputType()"
           class="@inputCssClass form-control"
           name="@Model.MetaField.FieldName"
           placeholder="@Model.PlaceholderText"
           value="@Model.Value"
           aria-required="@isRequired"
           data-sf-role="text-field-input"
           @Html.Raw(Model.ValidationAttributes)
           @{if (hasDescription) { <text> aria-describedby='@Html.UniqueId("TextboxInfo") @Html.UniqueId("TextboxErrorMessage")' </text>  } else { <text> aria-describedby='@Html.UniqueId("TextboxErrorMessage")' </text>  } } />
    <div id='@Html.UniqueId("TextboxErrorMessage")' data-sf-role="error-message" role="alert" aria-live="assertive" class="text-danger"></div>
    @if (hasDescription)
    {
        <p id='@Html.UniqueId("TextboxInfo")' class="text-muted">@Model.MetaField.Description</p>
    }
    <input data-sf-role="violation-messages" data-sf-description="@Html.UniqueId("ConfirmTextbox")" type="hidden" value='{"required": "@Model.ConfirmationFieldRequiredViolationMessage"}' />
    <label class="h6" for='@Html.UniqueId("ConfirmTextbox")'>@Model.ConfirmationTitle</label>
    <input id='@Html.UniqueId("ConfirmTextbox")'
           type="@Model.InputType.ToHtmlInputType()"
           class="@inputCssClass form-control"
           placeholder="@Model.ConfirmationPlaceholder"
           value="@Model.SecondValue"
           aria-required="@isRequired"
           data-sf-role="text-field-confirmation-input" />
    <div id='@Html.UniqueId("TextboxErrorMessage")' data-sf-role="error-message" role="alert" aria-live="assertive" class="text-danger"></div>
</div>
@Html.Script(Url.WidgetContent("Mvc/Scripts/ConfirmationField/confirmation-field.js"), "bottom")
